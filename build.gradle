plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
	id 'org.sonarqube' version '3.4.0.2513'
    id "org.flywaydb.flyway" version "9.17.0"
	id 'jacoco'
	id 'java'
}

description   = description
group         = group
version       = version

sourceCompatibility = '17'

apply from: 'dependencies.gradle'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

def envProperties = new Properties()
file('.env').withInputStream { envProperties.load(it) }
String dbUrl = envProperties['DB_URL']
String dbUser = envProperties['DB_USER']
String dbPass = envProperties['DB_PASSWORD']




import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

static String getCurrentDateTimeFormatted() {
    LocalDateTime now = LocalDateTime.now()
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss")
    return now.format(formatter)
}

import org.flywaydb.gradle.task.FlywayMigrateTask

tasks.register('generateSqlWithTimestampAndTable', FlywayMigrateTask) {
    group = 'database'
    description = 'Generate SQL file using Flyway with timestamp and table name'

    // Defina a configuração do Flyway aqui (ou reutilize a configuração global do Flyway)
    url = "${dbUrl}"
    user = "${dbUser}"
    password = "${dbPass}"
    locations = ['filesystem:src/main/resources/db/migration']

    // Crie um parâmetro de entrada para receber o nome da tabela
    ext.tableName = 'V1__'

    doLast {
        if (tableName.trim()) {
            // Ative a geração do arquivo SQL com data e hora e nome da tabela
            String timestamp = getCurrentDateTimeFormatted()
            // Create the SQL file with the table name and timestamp
            File outputFile = file("src/main/resources/db/migration/V${timestamp}__${tableName}.sql")
            outputFile.createNewFile()

        } else {
            println "Please provide a table name using -PtableName=your_table_name"
        }
    }
}


flyway {
    url = "${dbUrl}"
    user = "${dbUser}"
    password = "${dbPass}"
    locations = ['filesystem:src/main/resources/db/migration']
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
		xml.destination file("$buildDir/jacoco/jacoco.xml")
        csv.enabled false
        html.enabled true
        html.destination file("$buildDir/reports/jacoco")
        
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
        }
        rule {
            enabled = true
            limit {
                counter = 'BRANCH'
                minimum = 0.1
            }
            excludes = []
        }

        rule {
            enabled = true
            limit {
                counter = 'METHOD'
                minimum = 0.1
            }
            excludes = []
        }
    }
}

sonarqube {
	properties {
		property "sonar.projectKey",  "mayconaraujosantos_mkdata-company"
		property "sonar.organization",  "mayconaraujosantos"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}

test {
    finalizedBy jacocoTestReport
}

test.finalizedBy jacocoTestReport
jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
	useJUnitPlatform()
}
